on:
  push:
    tags: ['v*']

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
    - name: Save release upload URL to artifact
      run: echo "${{ steps.release.outputs.upload_url }}" > release-upload-url
    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: release-upload-url
        path: release-upload-url

  build:
    name: Upload Release Asset
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        build:
        - linux
        - win-msvc
        include:
        - build: linux
          os: ubuntu-latest
        - build: win-msvc
          os: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: release-upload-url
        path: release-upload-url
    - name: Set release upload URL and release version
      shell: bash
      run: |
        release_upload_url="$(cat release-upload-url/release-upload-url)"
        echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
    - name: Decrypt tokens
      run: ./assets/ci/decrypt_secret.sh
      env:
        TOKEN_PASSPHRASE: ${{ secrets.TOKEN_PASSPHRASE }}
    
    - name: Set cargo environment variables
      shell: bash
      run: |
        echo "EU4_IRONMAN_TOKENS=$current_dir/assets/tokens/eu4.txt" >> $GITHUB_ENV
        echo "CK3_IRONMAN_TOKENS=$current_dir/assets/tokens/ck3.txt" >> $GITHUB_ENV
        echo "IMPERATOR_TOKENS=$current_dir/assets/tokens/imperator.txt" >> $GITHUB_ENV
      env:
        current_dir: ${{ github.workspace }}
    - name: Build
      run: cargo build --release --verbose
    - name: strip linux builds
      if: matrix.build == 'linux'
      run: strip ./target/release/librakaly.so
    - name: Upload librakaly.so
      uses: actions/upload-release-asset@v1
      if: matrix.build == 'linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ./target/release/librakaly.so
        asset_name: librakaly.so
        asset_content_type: application/octet-stream
    - name: Upload rakaly.h
      uses: actions/upload-release-asset@v1
      if: matrix.build == 'linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ./target/rakaly.h
        asset_name: rakaly.h
        asset_content_type: application/octet-stream
    - name: Upload rakaly_wrapper.h
      uses: actions/upload-release-asset@v1
      if: matrix.build == 'linux'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ./rakaly_wrapper.h
        asset_name: rakaly_wrapper.h
        asset_content_type: application/octet-stream
    - name: Upload rakaly.dll
      uses: actions/upload-release-asset@v1
      if: matrix.build == 'win-msvc'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ./target/release/rakaly.dll
        asset_name: rakaly.dll
        asset_content_type: application/octet-stream
    - name: Upload rakaly.dll.lib
      uses: actions/upload-release-asset@v1
      if: matrix.build == 'win-msvc'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ./target/release/rakaly.dll.lib
        asset_name: rakaly.dll.lib
        asset_content_type: application/octet-stream